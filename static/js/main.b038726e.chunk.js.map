{"version":3,"sources":["utils.js","components/NoteList.js","components/NoteViewer.js","App.js","serviceWorker.js","index.js"],"names":["wait","a","delay","Promise","resolve","reject","setTimeout","encrypt","data","decrypt","getNotes","JSON","parse","localStorage","getItem","setNotes","setItem","stringify","deleteNote","query","filter","item","randomString","length","sufix","result","Math","floor","Number","MAX_SAFE_INTEGER","random","toString","slice","Container","styled","ul","NodeList","notes","selectedNote","onSelect","selectedId","id","className","map","note","key","onClick","title","div","NodeViewer","mode","setMode","reloadNotes","useState","content","setContent","loading","setLoading","useEffect","then","decrypted","el","useRef","options","save","current","querySelector","value","plainContent","newNote","savedNote","idx","nextNotes","findIndex","push","saveOrUpdateNote","renderedComponent","source","actions","disabled","role","aria-label","getViewModeOptions","name","defaultValue","getEditModeOptions","ref","welcomeNote","App","setNote","NoteList","NoteViewer","activeNode","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b038726e.chunk.js","sourcesContent":["export const wait = async (delay = 500) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, delay);\n  });\n};\n\nexport const encrypt = async (data) => {\n  await wait();\n  return data;\n};\n\nexport const decrypt = async (data) => {\n  await wait();\n  return data;\n};\n\nconst NOTES_DB_KEY = 'NOTES_DB';\nexport const getNotes = () =>\n  JSON.parse(localStorage.getItem(NOTES_DB_KEY)) || [];\n\nexport const setNotes = (data) =>\n  localStorage.setItem(NOTES_DB_KEY, JSON.stringify(data));\n\nexport const saveOrUpdateNote = (note) => {\n  let idx;\n  let savedNote;\n  const nextNotes = [...getNotes()];\n  if (note.id) {\n    idx = nextNotes.findIndex((item) => item.id === note.id);\n  }\n\n  if (idx >= 0) {\n    savedNote = { ...nextNotes[idx], ...note };\n    nextNotes[idx] = savedNote;\n  } else {\n    savedNote = { id: randomString(), ...note };\n    nextNotes.push(savedNote);\n  }\n  setNotes(nextNotes);\n  return savedNote;\n};\nexport const deleteNote = (query) =>\n  setNotes(getNotes().filter((item) => !query(item)));\n\nexport const randomString = (length = 32, sufix = '') => {\n  const result =\n    sufix + Math.floor(Number.MAX_SAFE_INTEGER * Math.random()).toString(36);\n  return result.length >= length\n    ? result.slice(0, length)\n    : randomString(length, result);\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.ul`\n  margin: 0;\n  list-style: none;\n  > li {\n    cursor: pointer;\n    padding: 0.6em;\n\n    &.active {\n      background: CornflowerBlue;\n      color: white;\n    }\n  }\n`;\nfunction NodeList({ notes = [], selectedNote, onSelect }) {\n  const selectedId = selectedNote && selectedNote.id ? selectedNote.id : '';\n  return (\n    <Container className='notes'>\n      {notes.map((note) => (\n        <li\n          key={note.id}\n          onClick={() => onSelect(note)}\n          className={note.id === selectedId ? 'active' : ''}\n        >\n          {note.title}\n        </li>\n      ))}\n    </Container>\n  );\n}\n\nexport default NodeList;\n","import React, { useState, useEffect, useRef } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport styled from 'styled-components';\nimport { encrypt, decrypt, deleteNote, saveOrUpdateNote } from '../utils';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  > * {\n    flex-grow: 0;\n  }\n  h1 > input {\n    width: 100%;\n    font-size: inherit;\n  }\n  > section {\n    flex-grow: 1;\n    overflow: auto;\n    textarea {\n      width: 100%;\n      height: 90%;\n      resize: none;\n      box-sizing: border-box;\n    }\n  }\n  > .actions {\n    button {\n      border: none;\n      margin-right: 0.6em;\n      &.right {\n        float: right;\n      }\n      > span[role='img'] {\n        display: block;\n        font-size: 1.3rem;\n      }\n    }\n  }\n`;\n\nfunction NodeViewer({ note, mode, setMode, reloadNotes }) {\n  const [content, setContent] = useState();\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    setContent('## Decrypting\\nPlease wait...');\n    if (note) {\n      decrypt(note.content).then((decrypted) => {\n        setContent(decrypted);\n        setLoading(false);\n      });\n    } else {\n      setContent('');\n      setLoading(false);\n    }\n  }, [note]);\n\n  const el = useRef(null);\n  const save = () => {\n    const title = el.current.querySelector('input[name=\"title\"]').value;\n    const plainContent = el.current.querySelector('textarea[name=\"content\"]')\n      .value;\n    setLoading(true);\n    encrypt(plainContent).then((content) => {\n      const newNote = {\n        title,\n        content,\n      };\n      if (note && note.id) newNote.id = note.id;\n      const savedNote = saveOrUpdateNote(newNote);\n\n      setLoading(false);\n      reloadNotes(savedNote);\n    });\n  };\n  const options = { note, content, setMode, reloadNotes, save, loading };\n  const renderedComponent =\n    mode === 'view' ? getViewModeOptions(options) : getEditModeOptions(options);\n  return (\n    <Container className='viewer' ref={el}>\n      <h1>{renderedComponent.title}</h1>\n      <section>{renderedComponent.content}</section>\n      <footer className='actions'>{renderedComponent.actions}</footer>\n    </Container>\n  );\n}\n\nfunction getViewModeOptions({ note, content, setMode, reloadNotes, loading }) {\n  return {\n    title: note.title,\n    content: <ReactMarkdown source={content} className='markdown-body' />,\n    actions: (\n      <>\n        <button\n          className='right'\n          onClick={() => setMode('edit')}\n          disabled={loading}\n        >\n          <span role='img' aria-label='edit'>\n            ✏\n          </span>\n          Edit\n        </button>\n        <button\n          className='right'\n          disabled={loading}\n          onClick={() => {\n            deleteNote((item) => item.id === note.id);\n            reloadNotes();\n          }}\n        >\n          <span role='img' aria-label='delete'>\n            🗑\n          </span>\n          Delete\n        </button>\n      </>\n    ),\n  };\n}\n\nfunction getEditModeOptions({\n  note,\n  content,\n  setMode,\n  reloadNotes,\n  save,\n  loading,\n}) {\n  return {\n    title: (\n      <input\n        name='title'\n        defaultValue={note ? note.title : 'Untitled Note'}\n        disabled={loading}\n      />\n    ),\n    content: (\n      <textarea\n        name='content'\n        defaultValue={note ? content : ''}\n        disabled={loading}\n      />\n    ),\n    actions: (\n      <>\n        <button onClick={() => reloadNotes(note)} disabled={loading}>\n          <span role='img' aria-label='cancel'>\n            🚫\n          </span>\n          Cancel\n        </button>\n        <button className='right' onClick={save} disabled={loading}>\n          <span role='img' aria-label='save'>\n            💾\n          </span>\n          Save\n        </button>\n        {!note ? null : (\n          <button\n            className='right'\n            disabled={loading}\n            onClick={() => {\n              deleteNote((item) => item.id === note.id);\n              reloadNotes();\n            }}\n          >\n            <span role='img' aria-label='delete'>\n              🗑\n            </span>\n            Delete\n          </button>\n        )}\n      </>\n    ),\n  };\n}\n\nexport default NodeViewer;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { getNotes, encrypt } from './utils';\nimport NoteList from './components/NoteList';\nimport NoteViewer from './components/NoteViewer';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  > .main {\n    display: flex;\n    height: 100%;\n    overflow: hidden;\n\n    ul.notes {\n      flex-basis: 33%;\n      margin: 0;\n      padding: 0;\n      overflow: auto;\n    }\n\n    div.viewer {\n      padding-left: 1em;\n      flex-basis: 66%;\n    }\n  }\n  > * {\n    padding: 0.6em;\n    box-sizing: border-box;\n  }\n`;\n\nconst welcomeNote = {\n  title: 'Welcome to ProtonNote',\n  content: encrypt(` You don't have any notes. You can add a new note by clicking the above 'New note ' button. \n\n>Author: [Leonard Lin](https://github.com/gwokae)\n`),\n};\nfunction App() {\n  const [mode, setMode] = useState('view');\n  const [notes, setNotes] = useState(getNotes());\n  const [note, setNote] = useState(notes[0] || welcomeNote);\n\n  const reloadNotes = (activeNode) => {\n    const notes = getNotes();\n    setNotes(notes);\n    setNote(activeNode || notes[0] || welcomeNote);\n    setMode('view');\n  };\n  return (\n    <Container className='App'>\n      <div className='actions'>\n        <button\n          disabled={mode !== 'view'}\n          onClick={() => {\n            setNote(null);\n            setMode('edit');\n          }}\n        >\n          <span role='img' aria-label='new note'>\n            ➕\n          </span>\n          New note\n        </button>\n      </div>\n      <div className='main'>\n        <NoteList\n          notes={notes}\n          selectedNote={note}\n          onSelect={(note) => setNote(note)}\n        />\n        <NoteViewer\n          note={note}\n          mode={mode}\n          setMode={setMode}\n          reloadNotes={reloadNotes}\n        />\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}